lowercaseOutputName: true
jmxUrl: service:jmx:rmi:///jndi/rmi://{{ getv "/jmx/host" }}:{{ getv "/jmx/port" }}/jmxrmi
rules:
- pattern : kafka.server<type=BrokerTopicMetrics,name=MessagesInPerSec><>Value
- pattern : kafka.server<type=BrokerTopicMetrics,name=BytesInPerSec><>Value
- pattern : kafka.network<type=RequestMetrics,name=RequestsPerSec,request={Produce|FetchConsumer|FetchFollower}><>Value
- pattern : kafka.server<type=BrokerTopicMetrics,name=BytesOutPerSec><>Value
- pattern : kafka.log<type=LogFlushStats,name=LogFlushRateAndTimeMs><>Value
- pattern : kafka.server<type=ReplicaManager,name=UnderReplicatedPartitions><>(Count|Value)
- pattern : kafka.controller<type=KafkaController,name=ActiveControllerCount><>(Count|Value)
- pattern : kafka.controller<type=ControllerStats,name=LeaderElectionRateAndTimeMs><>Value
- pattern : kafka.controller<type=ControllerStats,name=UncleanLeaderElectionsPerSec><>Value
- pattern : kafka.server<type=ReplicaManager,name=PartitionCount><>(Count|Value)
- pattern : kafka.server<type=ReplicaManager,name=LeaderCount><>(Count|Value)
- pattern : kafka.server<type=ReplicaManager,name=IsrShrinksPerSec><>Value
- pattern : kafka.server<type=ReplicaManager,name=IsrExpandsPerSec><>Value
- pattern : kafka.server<type=ReplicaFetcherManager,name=MaxLag,clientId=Replica><>Value
- pattern : kafka.server<type=FetcherLagMetrics,name=ConsumerLag,clientId=([-.\w]+),topic=([-.\w]+),partition=([0-9]+)><>Value
- pattern : kafka.server<type=DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce><>Value
- pattern : kafka.consumer<type=ConsumerFetcherManager,name=MaxLag,clientId=([-.\w]+)><>Value
- pattern : kafka.cluster<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
  name: kafka_cluster_$1_$2
  labels:
    topic: "$3"
    partition: "$4"
- pattern : kafka.log<type=Log, name=(.+), topic=(.+), partition=(.+)><>Value
  name: kafka_log_$1
  labels:
    topic: "$2"
    partition: "$3"
- pattern : kafka.controller<type=(.+), name=(.+)><>(Count|Value)
  name: kafka_controller_$1_$2
- pattern : kafka.network<type=(.+), name=(.+)><>Value
  name: kafka_network_$1_$2
- pattern : kafka.network<type=(.+), name=(.+)PerSec, request=(.+)><>Count
  name: kafka_network_$1_$2_total
  labels:
    request: "$3"
- pattern : kafka.network<type=(.+), name=(\w+), networkProcessor=(.+)><>Count
  name: kafka_network_$1_$2
  labels:
    request: "$3"
  type: COUNTER
- pattern : kafka.network<type=(.+), name=(\w+)><>Count
  name: kafka_network_$1_$2
- pattern : kafka.server<type=(.+), name=(.+)PerSec\w*, topic=(.+)><>Count
  name: kafka_server_$1_$2_total
  labels:
    topic: "$3"
- pattern : kafka.server<type=(.+), name=(.+)PerSec\w*><>Count
  name: kafka_server_$1_$2_total
  type: COUNTER
- pattern : kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|Value)
  name: kafka_server_$1_$2
  labels:
    topic: "$3"
  type: COUNTER
- pattern : kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.*)><>(Count|Value)
  name: kafka_server_$1_$2
  labels:
    topic: "$3"
    partition: "$4"
- pattern : kafka.server<type=(.+), name=(.+)><>(Count|Value)
  name: kafka_server_$1_$2
- pattern : kafka.server<type=(.+), name=(.+), clientId=(.+)><>(Count|Value)
  name: kafka_server_$1_$2
  labels:
    clientId: "$2"
- pattern : kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
  name: kafka_$1_$2_$3_total
- pattern : kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, topic=(.+)><>Count
  name: kafka_$1_$2_$3_total
  labels:
    topic: "$4"
  type: COUNTER
- pattern : kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, topic=(.+), partition=(.+)><>Count
  name: kafka_$1_$2_$3_total
  labels:
    topic: "$4"
    partition: "$5"
  type: COUNTER
- pattern : kafka.(\w+)<type=(.+), name=(.+)><>(Count|Value)
  name: kafka_$1_$2_$3_$4
  type: COUNTER
- pattern : kafka.(\w+)<type=(.+), name=(.+), (\w+)=(.+)><>(Count|Value)
  name: kafka_$1_$2_$3_$6
  labels:
    "$4": "$5"
- pattern : java.lang<type=(.*)>